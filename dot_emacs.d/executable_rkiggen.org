#+TITLE: Rob Kiggen's Emacs configuration
#+AUTHOR: Rob Kiggen
#+EMAIL: robby.kiggen@essential-it.be
#+STARTUP: hidestars
#+OPTIONS: ^:nil # Disable underscore causing subscript
#+OPTIONS: toc:4 h:4

* Introduction

Below you can find my Emacs configuration, which is largely divided in the following sections:
1. Initialization: configure things necessary for the rest of my configuration (e.g. package management);
2. Package: installs all the packages used for my configuration (it is easier to have separate section for package
   installations since one package can be used for multiple configuration sections/workflows); 
3. General settings: configure general Emacs settings;
4. Workflow settings: configure settings related to my specific workflows;
   
** Todo's
Below you can find some of the things I'd like to try out:
[ ] Add ChatGPT client
[ ] Cheatsheet Keybindings: use Hydra
[ ] Easy navigation: windows, buffers, ...

* Initialization

** Package Management

#+BEGIN_SRC emacs-lisp
;; Define and initialise package repositories
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; install use-package if it is not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

(setq package-enable-at-startup nil)

;; ensure all packages are installed from the package manager
(setq use-package-always-ensure 't)
#+END_SRC

** Performance Tweaks

Add a function to emacs-startup-hook to print out the duration of Emacs startup:

#+BEGIN_SRC emacs-lisp
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

* Packages


| Task                         | Solution        | Notes                                                        |
|------------------------------+-----------------+--------------------------------------------------------------|
| Installing software packages | =use-package=   | might want to add =straight= in conjunction with use-package |
| A nicer mode line            | =doom-modeline= | don't forget to install the necessary icon fonts!            |
| Theme support                | =doom-themes=   | can we add shortcuts to cycle through the installed themes?  |
| Vim keybinding               | =evil=          | imo nothing can beat the vim keybindings for editing         |
| PlantUml                     | =plantuml-mode= |                                                              |
| C#                           | =chsharp-mode=  |                                                              |


** Doom Modeline
:properties:
:custom_id: package_doom_modeline
:end:

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config (column-number-mode 1)
  :custom
  (doom-modeline-height 30)
  (doom-modeline-window-width-limit nil)
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count nil)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-env-python-executable "python")
  ;; needs display-time-mode to be one
  (doom-modeline-time t)
  (doom-modeline-vcs-max-length 50)
  )
#+end_src

** Doom Themes
:properties:
:custom_id: package_doom_themes
:end:

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (let ((chosen-theme 'doom-material-dark))
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (setq doom-challenger-deep-brighter-comments t
          doom-challenger-deep-brighter-modeline t
          doom-rouge-brighter-comments t
          doom-ir-black-brighter-comments t
          modus-themes-org-blocks 'gray-background
          doom-dark+-blue-modeline nil)
    (load-theme chosen-theme t)))
#+end_src

** Evil
:properties:
:custom_id: package_evil
:end:

#+begin_src emacs-lisp
;;; Vim Bindings
(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  :init
  ;; allows for using cgn
  ;; (setq evil-search-module 'evil-search)
  (setq evil-want-keybinding nil)
  ;; no vim insert bindings
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1))

;;; Vim Bindings Everywhere else
(use-package evil-collection
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))
#+end_src

** Denote
:properties:
:custom_id: package_denote
:end:

#+begin_src emacs-lisp

#+end_src

** TempEL
:properties:
:custom_id: package_tempel
:end:

#+begin_src emacs-lisp
   ;; Configure Tempel
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	   ("M-*" . tempel-insert))
    :config
    ;; configure the template path
    (setq tempel-path `("~/.emacs.d/templates/tempel/*.eld"))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
		  (cons #'tempel-expand
			completion-at-point-functions)))

    (add-hook 'conf-mode-hook 'tempel-setup-capf)
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
  )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  ;(use-package tempel-collection)

  ;; Optional: Use the Corfu completion UI
  ;;(use-package corfu
  ;;  :init
  ;;  (global-corfu-mode))
#+end_src

** PlantUml mode

#+begin_src emacs-lisp
  ;; #----=[plantuml]=----#
  (use-package plantuml-mode
    :mode "(\\.\\(plantuml?\\|uml\\|puml\\)\\'"
    :config
    (setq plantuml-jar-path "~/.emacs.d/bin/plantuml/plantuml.jar")
    (setq plantuml-default-exec-mode 'jar)
  
    (setq plantuml-indent-level 2)
    (setq my/plantuml-indent-regexp-return "^\s*return\s+.+$")
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (add-to-list 'auto-mode-alist '("\\.uml\\'" . plantuml-mode))
  )
#+end_src

** C# mode

Resources:
- https://zacalot.xyz/post/tech/csharp-lsp-on-windows/
- https://www.johansivertsen.com/post/emacs-29-csharp/
- https://mclare.blog/posts/dotnet-development-in-emacs/

Download an Omnisharp release via: https://github.com/OmniSharp/omnisharp-roslyn/releases/

Setup Eglot to use Omnisharp-Roslyn:

#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
  (add-to-list 'eglot-server-programs
               `(csharp-mode . ,(eglot-alternatives
                                 '(("~/.emacs.d/bin/omnisharp-win-x64-net6.0/OmniSharp.exe" "-lsp")
                                   )))))
#+end_src

Enable Eglot for C#:
#+begin_src emacs-lisp
    (use-package csharp-mode
      :hook
      (csharp-mode . eglot-ensure))
#+end_src

* General settings

** Housekeeping

#+BEGIN_SRC emacs-lisp
  ;; create backups in a separate folder
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )

  ;; Don't write lock-files
  (setq create-lockfiles nil)
#+END_SRC

** Appearance

*** Keyboard Centric User Interface
#+BEGIN_SRC emacs-lisp
  ;; Create a keyboard-centric user interface

  ;; don't display startup messages
  (setq inhibit-startup-message t)
  ;; disable the toolbar
  (tool-bar-mode -1)
  ;; disable the menubar (you can access the menu via 'C-mouse-3'
  (menu-bar-mode -1)
  ;; disable the scrollbars
  (scroll-bar-mode -1)
  ;; display line numbers in every buffer
  (global-display-line-numbers-mode 1) 

  ;; use y or n instead of yes or no
  (defalias 'yes-or-no-p 'y-or-n-p) ;; Until Emacs 28
  (setopt use-short-answers t)   ;; Since Emacs 29, `yes-or-no-p' will use `y-or-n-p' 
#+END_SRC

*** Editing
I prefer lines to wrap, but instead of using =visual-line-mode= which wraps long lines near the window border, I like to
wrap my lines at approx. 120 characters. Individual languages/major modes can override this.

#+BEGIN_SRC emacs-lisp
  ;; Wrap lines near 120 characters
  (setq-default fill-column 120)  
  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; Overwrite selected text
  (delete-selection-mode t)

  ;; Scroll to the first and last line of the buffer
  (setq scroll-error-top-bottom t)

  ;; highlight the current line
  (global-hl-line-mode) 
#+END_SRC

*** Themes

Currently I'm using [[#package_doom_themes][doom-themes]] for theming support.

*** Mode line

[[#package_doom_modeline][Doom Modeline]] allows you to create reall beautifull modelines.

If you want to display icons you need to install the =nerd-icons= package and the [[https://github.com/rainstormstudio/nerd-icons.el#installing-fonts][required fonts]].
Run =M-x= =nerd-icons-install-fonts= to install the necessary fonts.
Alternatively you can do =M-x= =all-the-icons-install-fonts=.

** Keybindings
*** Evil (Vim keybindings)

I really like the Vim keybindings, which is why I've installed [[#package_evil][Evil]].


* Workflow settings

** Writing

*** Text Expansion
When you write a lot it makes sense to use text expansion.

For text expansion or snippets I use the (lightweight) [[#package_tempel][TempEL]] package.
TempEL uses the 'tempo' format, which has been around in Emacs for decades (probably a good sign) and allows you to
write templates in full Lisp data code.

** Development

Although I'm not using Emacs for development there are a lot of times when I need to use code blocks.

One such particular case is for creating diagrams (activity or erd) via plantuml:

#+begin_src emacs-lisp

  ; ensure we can use plantuml code blocks
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))) 
  (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/bin/plantuml.jar"))

  ; make tab works in code blocks
  (setq org-src-tab-acts-natively t) 
#+end_src



** Note taking


** Time Tracking
:properties:
:link: https://takeonrules.com/2024/01/31/adjusting-my-time-tracking-again/
:end:

I read Jeremy's latest post on how he set up dailies via =denote= for time tracking and it appealed to me, so I decided
to give it a try.

_Outline_:
My logs are kept in a separate folder where I create a separate note for each day.
When I start time tracking I need to specify the project (determined in project_list file).


#+begin_src emacs-lisp

#+end_src

** Publishing
:PROPERTIES:
:LINK: https://lucidmanager.org/productivity/publishing-with-org-mode-export/
:END:

Emacs Org mode is an ideal tool for writing without distractions because working with plain text allows you to focus on
content instead of design. While writing articles and books in plain text is pleasant and productive, it is not ideal
for sharing your work. The Org mode exports your work to PDF leveraging LaTeX, to a website, to a word processor
document, an ebook and many more formats.

In this section we'll define the settings for exporting your work as a journal article, a print-ready book PDF, or an
ebook. 

*** Html
Under the folder =~/.emacs.d/publishing/html= I place the export templates I use on a regular basis when I export to
Html. 

Currently these are:
1. theme-bigblow;
2. theme-readtheorg;
3. theme-thing;

These layouts can be used by adding the following to your emacs file:
#+SETUPFILE: location to the html template, e.g. ~/.emacs.d/publishing/html/theme-readtheorg.setup

For more info please look here: https://github.com/fniessen/org-html-themes 

*** Presentations

#+BEGIN_SRC emacs-lisp
  ; Reveal.js + Org mode
  (use-package ox-reveal
  :ensure ox-reveal)

  ;;(require 'ox-reveal)
  (setq org-reveal-root "file:///home/rkiggen/.emacs.d/publishing/slides/reveal.js")
#+END_SRC

*** Latex/Pdf
In the folder =~/.emacs.d/publishing/latex= you can find all my regularly used LaTeX templates. 

These layouts can be used by adding the following to your org file:
#+SETUPFILE: location to the latex template

First we need to define the necessary PDF export settings:
#+BEGIN_SRC emacs-lisp

;    (setq org-latex-listings 'listings)
;    (require 'ox-latex)

;    (add-to-list 'org-latex-packages-alist '("" "listings"))
  
  ;; LaTeX PDF Export settings
  (use-package ox-latex
	      :ensure nil
	      :demand t
	      :custom
              ;; Multiple LaTeX passes for bibliographies
	      (org-latex-pdf-process
	       '("pdflatex -interaction nonstopmode -output-directory %o %f"
		 "bibtex %b"
		 "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
		 "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
	      ;; Clean temporary files after export
	      (org-latex-logfiles-extensions
	       (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out"
		       "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk"
		       "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"
		       "tex" "bcf"))))

  ;; LaTeX add page break after TOC
  (setq org-latex-toc-command "\\tableofcontents \\clearpage \n")
#+END_SRC

Under the folder =~/.emacs.d/publishing/latex= we defined our own custom base LaTeX templates in separate .el files
(which can be used in our .setup files):

#+BEGIN_SRC emacs-lisp
  
  (defun get-string-from-file (filePath)
    "Return filePath's file content."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))

  (defun read-lines (filePath)
    "Return a list of lines of a file at filePath."
    (with-temp-buffer
      (insert-file-contents filePath)
      (split-string (buffer-string) "\n" t)))

  (mapc 'load (file-expand-wildcards "~/.emacs.d/publishing/latex/*.el"))

#+END_SRC

Below you'll find an overview of the [[https://latex-tutorial.com/documentclass-latex/][document classes]]:

| latex    | usage                                                                                        | org               |
| document |                                                                                              | latex             |
| classes  |                                                                                              | base class        |
|----------+----------------------------------------------------------------------------------------------+-------------------|
| article  | To produce articles for scientific journals, short reports, program documentation, and, in   | org-plain-article |
|          | general, any kind of short document that doesn't need a complex division into chapters       |                   |
|          | and parts                                                                                    |                   |
| report   | A kind of long article that can contain several chapters. It is usually used for small books | org-plain-report  |
|          | and thesis.                                                                                  |                   |
| book     | Used to typeset real books, includes all the kinds of typesetting standards that one may     | org-plain-book    |
|          | expect from a printed book: chapters and parts, two kinds of pages, a front matter, etc      |                   |
| slides   | It was used to produce slides, although the external package beamer is much more             |                   |
|          | powerful for this purpose.                                                                   |                   |
| letter   | For writing letters.                                                                         |                   |

The first 2 document classes are the basic ones; if you don't know what document class you should use, always start with
article.

The report class is very similar, the main difference with the article being that you can insert chapters with \chapter,
while in the article class the highest element in the hierarchy of titles is the \section command.

*** Libre Office Writer / Microsoft Word
Load regular used, custom Latex templates:

*** Resume's
I like the concept of keeping content and layout separated as much as possible.
The =Org CV= package from [[https://titan-c.gitlab.io/org-cv/][TitanC]] allows to do just that for my resume's.

Zzamboni contributed the [[https://github.com/zzamboni/vita][AwesomeCV]] layout which I'll be using.

#+BEGIN_SRC emacs-lisp
(use-package ox-awesomecv
  :load-path "~/.emacs.d/lisp/org-cv"
  :init (require 'ox-awesomecv))  
#+END_SRC


* Custom Functions

** Open Emacs Config

#+BEGIN_SRC emacs-lisp
  (defun edit-init-file ()
    "Edit my init file in another window."
    (interactive)
    (let ((mwf-init-file "~/.emacs.d/rkiggen.org"))
      (find-file mwf-init-file)))

  (global-set-key (kbd "C-c i") 'edit-init-file)
#+END_SRC

* Appendix

C = Ctrl
M = Alt

** Interesting reads

- https://sachachua.com/blog/
- https://github.com/anschwa/emacs.d
- https://github.com/patrickt/emacs
- https://lucidmanager.org/productivity/more-productive-with-emacs/
- https://systemcrafters.net/emacs-from-scratch/ 
- https://www.masteringemacs.org/

- https://github.com/novoid/dot-emacs/blob/master/config.org
- https://github.com/james-stoup/emacs-org-mode-tutorial?tab=readme-ov-file#orgc157736
- https://takeonrules.com/2024/01/31/adjusting-my-time-tracking-again/
    

** Org Clock Report custom scope
:properties:
:link:
https://emacs.stackexchange.com/questions/5481/is-there-a-simple-way-to-use-all-org-files-referenced-in-a-main-file-for-the-org?rq=1
:end:

You can use:
#+begin_example
:scope some-function
#+end_example

where =some-function= returns required list of files. For example:
#+begin_src elisp
(defun some-function () org-agenda-files)
#+end_src

or
#+begin_src elisp
  (defun some-function()
    (append org-agenda-files
      (file-expand-wildcards "your-path/*.org")))
#+end_src
