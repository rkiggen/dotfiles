#+TITLE: Rob Kiggen's Emacs configuration
#+AUTHOR: Rob Kiggen
#+EMAIL: robby.kiggen@essential-it.be
#+STARTUP: hidestars
#+OPTIONS: ^:nil # Disable underscore causing subscript
#+OPTIONS: toc:4 h:4

* Package Management

#+BEGIN_SRC emacs-lisp
;; Define and initialise package repositories
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; install use-package if it is not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

(setq package-enable-at-startup nil)

;; ensure all packages are installed from the package manager
(setq use-package-always-ensure 't)
#+END_SRC

* Performance Tweaks

Add a function to emacs-startup-hook to print out the duration of Emacs startup:

#+BEGIN_SRC emacs-lisp
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

* Housekeeping

#+BEGIN_SRC emacs-lisp
  ;; create backups in a separate folder
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )

  ;; Don't write lock-files
  (setq create-lockfiles nil)
#+END_SRC


* Appearance

** Keyboard Centric User Interface
#+BEGIN_SRC emacs-lisp
  ;; Create a keyboard-centric user interface

  ;; don't display startup messages
  (setq inhibit-startup-message t)
  ;; disable the toolbar
  (tool-bar-mode -1)
  ;; disable the menubar (you can access the menu via 'C-mouse-3'
  (menu-bar-mode -1)
  ;; disable the scrollbars
  (scroll-bar-mode -1)
  ;; display line numbers in every buffer
  (global-display-line-numbers-mode 1) 

  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Themes

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (let ((chosen-theme 'doom-material-dark))
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (setq doom-challenger-deep-brighter-comments t
          doom-challenger-deep-brighter-modeline t
          doom-rouge-brighter-comments t
          doom-ir-black-brighter-comments t
          modus-themes-org-blocks 'gray-background
          doom-dark+-blue-modeline nil)
    (load-theme chosen-theme t)))
#+END_SRC

** Mode line

Most major modes pollute the modeline, so we pull in diminish.el to quiesce them.

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :config
  (diminish 'visual-line-mode))
#+END_SRC

The default modeline is pretty uninspiring, and mood-line is very minimal and pleasing. With a bit of elbow grease, it can be convinced to show the project-relative file name. 

#+BEGIN_SRC emacs-lisp
(defun pt/project-relative-file-name (include-prefix)
  "Return the project-relative filename, or the full path if INCLUDE-PREFIX is t."
  (letrec
      ((fullname (if (equal major-mode 'dired-mode) default-directory (buffer-file-name)))
       (root (project-root (project-current)))
       (relname (if fullname (file-relative-name fullname root) fullname))
       (should-strip (and root (not include-prefix))))
    (if should-strip relname fullname)))

(use-package mood-line
  :config
  (defun pt/mood-line-segment-project-advice (oldfun)
    "Advice to use project-relative file names where possible."
    (let
        ((project-relative (ignore-errors (pt/project-relative-file-name nil))))
         (if
             (and (project-current) (not org-src-mode) project-relative)
             (propertize (format "%s  " project-relative) 'face 'mood-line-buffer-name)
           (funcall oldfun))))

  (advice-add 'mood-line-segment-buffer-name :around #'pt/mood-line-segment-project-advice)
  (mood-line-mode))
#+END_SRC


* Writing

I prefer lines to wrap, but instead of using =visual-line-mode= which wraps long lines near the window border, I like to wrap my lines at approx. 120 characters.
Individual languages/major modes can override this.

#+BEGIN_SRC emacs-lisp
  ;; Wrap lines near 120 characters
  (setq-default fill-column 120)  
  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; Overwrite selected text
  (delete-selection-mode t)

  ;; Scroll to the first and last line of the buffer
  (setq scroll-error-top-bottom t)

  ;; highlight the current line
  (global-hl-line-mode) 
#+END_SRC


** Vim

#+BEGIN_SRC emacs-lisp
;;; Vim Bindings
(use-package evil
  :demand t
  :bind (("<escape>" . keyboard-escape-quit))
  :init
  ;; allows for using cgn
  ;; (setq evil-search-module 'evil-search)
  (setq evil-want-keybinding nil)
  ;; no vim insert bindings
  (setq evil-undo-system 'undo-fu)
  :config
  (evil-mode 1))

;;; Vim Bindings Everywhere else
(use-package evil-collection
  :after evil
  :config
  (setq evil-want-integration t)
  (evil-collection-init))

#+END_SRC


* Major Modes

** Org Mode

Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.

Since Org Mode 9.2 the smart template system has been replaced with the structured template system and the corresponding key bindings have been changed as well.
Instead of typing <s for inserting a source code block you now have to type the following key binding =C-c C-,= (org-insert-structure-template).

_Fun fact:_ the key binding C-, does not work in terminal emacs!

*** Calendaring
I'd like to have a global (integrated) view of all my calendars in Orgmode Agenda

I do this by syncing all calendars via caldav to Orgmode:
https://www.reddit.com/r/orgmode/comments/8rl8ep/making_orgcaldav_useable/

;(setq org-caldav-calendars
;  '((:calendar-id "Robby"
;		:url "https://www.google.com/calendar/dav/rob.kiggen@gmail.com/events/"
;		:inbox "~/Brain/org/calendars/personal.org")))


* Exporting

** Html
Under the folder =~/.emacs.d/publishing/html= I place the export templates I use on a regular basis when I export to Html.

Currently these are:
1. theme-bigblow;
2. theme-readtheorg;
3. theme-thing;

These layouts can be used by adding the following to your emacs file:
#+setupfile: location to the html template, e.g. ~/.emacs.d/publishing/html/theme-readtheorg.setup

For more info please look here: https://github.com/fniessen/org-html-themes 

** Presentations

#+BEGIN_SRC emacs-lisp
  ; Reveal.js + Org mode
  (use-package ox-reveal
  :ensure ox-reveal)

  ;;(require 'ox-reveal)
  (setq org-reveal-root "file:///home/rkiggen/.emacs.d/publishing/slides/reveal.js")
#+END_SRC

** Latex/Pdf

*** Documents
Load regular used, custom Latex templates:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'listings)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))

;(setq org-latex-minted-options
;        '(("frame" "lines") ("linenos=true")))

;(setq org-latex-pdf-process
;      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;(setq org-src-fontify-natively t)
(defun get-string-from-file (filePath)
  "Return filePath's file content."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))

(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))

(mapc 'load (file-expand-wildcards "~/.emacs.d/publishing/latex/*/*.el"))
#+END_SRC

*** Resume's
I like the concept of keeping content and layout separated as much as possible.
The =Org CV= package from [[https://titan-c.gitlab.io/org-cv/][TitanC]] allows to do just that for my resume's.

Zzamboni contributed the [[https://github.com/zzamboni/vita][AwesomeCV]] layout which I'll be using.

#+BEGIN_SRC emacs-lisp
(use-package ox-awesomecv
  :load-path "~/.emacs.d/lisp/org-cv"
  :init (require 'ox-awesomecv))  
#+END_SRC

* Custom Functions

** Open Emacs Config

#+BEGIN_SRC emacs-lisp
  (defun edit-init-file ()
    "Edit my init file in another window."
    (interactive)
    (let ((mwf-init-file "~/.emacs.d/rkiggen.org"))
      (find-file mwf-init-file)))

  (global-set-key (kbd "C-c i") 'edit-init-file)
#+END_SRC

* Appendix

C = Ctrl
M = Alt

Interesting configurations:
- https://github.com/anschwa/emacs.d
- https://github.com/patrickt/emacs
- https://lucidmanager.org/productivity/more-productive-with-emacs/
- https://systemcrafters.net/emacs-from-scratch/ 
- https://www.masteringemacs.org/

